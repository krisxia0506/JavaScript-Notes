## 把数组转换为字符串

JavaScript 方法 `toString()` 把数组转换为数组值（逗号分隔）的字符串。

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString(); //Banana,Orange,Apple,Mango
```

`join()` 方法也可将所有数组元素结合为一个字符串。

它的行为类似 toString()，但是您还可以规定分隔符：

```js
var fruits = ["Banana", "Orange","Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * "); 
//Banana * Orange * Apple * Mango
```

## Popping 和 Pushing

在处理数组时，删除元素和添加新元素是很简单的。

Popping 和 Pushing 指的是：

从数组*弹出*项目，或向数组*推入*项目。

## Popping

`pop()` 方法从数组中删除最后一个元素：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();              // 从 fruits 删除最后一个元素（"Mango"）
```

`pop()` 方法返回“被弹出”的值：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = fruits.pop();      // x 的值是 "Mango"
```

## Pushing

`push()` 方法（在数组结尾处）向数组添加一个新的元素：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");       //  向 fruits 添加一个新元素
```

`push()` 方法返回新数组的长度：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x =  fruits.push("Kiwi");   //  x 的值是 5
```

## 位移元素

位移与弹出等同，但处理首个元素而不是最后一个。

`shift()` 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引。

`shift()` 方法返回被“位移出”的字符串：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();            // 从 fruits 删除第一个元素 "Banana"，返回Banana
```

`unshift()` 方法（在开头）向数组添加新元素，并“反向位移”旧元素：

`unshift()` 方法返回新数组的长度。

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");    // 向 fruits 添加新元素 "Lemon"，返回5
```

## 删除元素

既然 JavaScript 数组属于对象，其中的元素就可以使用 JavaScript `delete` 运算符来*删除*：

使用 `delete` 会在数组留下未定义的空洞。请使用 `pop()` 或 `shift()` 取而代之。

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];           // 把 fruits 中的首个元素改为 undefined
```

## 拼接数组

`splice()` 方法可用于向数组添加新项：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
```

第一个参数（2）定义了应添加新元素的位置（拼接）。

第二个参数（0）定义应删除多少元素。

其余参数（“Lemon”，“Kiwi”）定义要添加的新元素。

`splice()` 方法返回一个包含已删除项的数组：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = "原数组：<br> " + fruits;

function myFunction() {
  var removed = fruits.splice(2, 2, "Lemon", "Kiwi"); 
  document.getElementById("demo2").innerHTML = "新数组：<br>" + fruits;
  document.getElementById("demo3").innerHTML = "已删除项：<br> " + removed; 
}
```

## 使用 splice() 来删除元素

通过聪明的参数设定，您能够使用 `splice()` 在数组中不留“空洞”的情况下移除元素：

```js
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);        // 删除 fruits 中的第一个元素
```

## 合并（连接）数组

`concat()` 方法通过合并（连接）现有数组来创建一个新数组：

```js
var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias", "Linus"];
var myChildren = myGirls.concat(myBoys);   // 连接 myGirls 和 myBoys
```

`concat()` 方法不会更改现有数组。它总是返回一个新数组。

`concat()` 方法可以使用任意数量的数组参数：

```js
var arr1 = ["Cecilie", "Lone"];
var arr2 = ["Emil", "Tobias", "Linus"];
var arr3 = ["Robin", "Morgan"];
var myChildren = arr1.concat(arr2, arr3);   // 将arr1、arr2 与 arr3 连接在一起
```

`concat()` 方法也可以将值作为参数：

```js
var arr1 = ["Cecilie", "Lone"];
var myChildren = arr1.concat(["Emil", "Tobias", "Linus"]); 
```























